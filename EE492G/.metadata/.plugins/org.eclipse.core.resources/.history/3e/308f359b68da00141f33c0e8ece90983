#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
	// import file
	Mat color = imread(argv[1]);
	Mat src = imread(argv[1],0);
	Mat dst, cdst;

	// set region of interest to bottom two thirds
	// remember that the skyline is almost always going to bet there so you wont need that section
	int topThirdHeight = src.size().height/4;
	Mat roi = src(Rect(0,topThirdHeight,src.size().width -1,(topThirdHeight*3) -1));

	GaussianBlur(roi, roi, Size(5, 5), 2, 2); //applying Gaussian filter

	Canny(roi, dst, 100, 200, 3);
	cvtColor(dst, cdst, COLOR_GRAY2BGR);

	/* Hough Transform Code from OPENCV tutorial website */
	#if 0
	 vector<Vec2f> lines;
	 HoughLines(dst, lines, 1, CV_PI/180, 100, 0, 0 );

	 for( size_t i = 1; i < lines.size(); i++ )
	 {
		float rho = lines[i][0], theta = lines[i][1];
		Point pt1, pt2;
		double a = cos(theta), b = sin(theta);
		double x0 = a*rho, y0 = b*rho;
		pt1.x = cvRound(x0 + 1000*(-b));
		pt1.y = cvRound(y0 + 1000*(a));
		pt2.x = cvRound(x0 - 1000*(-b));
		pt2.y = cvRound(y0 - 1000*(a));
		line( cdst, pt1, pt2, Scalar(0,0,255), 3, CV_AA);
	 }
	#else
	 vector<Vec4i> lines;
	 HoughLinesP(dst, lines, 1, CV_PI/180, 50, 50, 10 );
	 for( size_t i = 0; i < lines.size()-2; i++ )
	 {
	   Vec4i l = lines[i];
	   arrowedLine( color, Point(l[0]+topThirdHeight, l[1]), Point(l[2]+topThirdHeight, l[3]), Scalar(0,0,255), 1, LINE_AA);
	 }
	#endif
	/*****************************************************/

	namedWindow("Detected Lines", WINDOW_NORMAL);
	imshow("Detected Lines", color);


	waitKey();

	return 0;
}
